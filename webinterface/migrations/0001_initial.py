# Generated by Django 2.1.3 on 2018-12-20 11:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import webinterface.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('ban', 'Ban'), ('unban', 'Unban'), ('softban', 'Softban'), ('kick', 'Kick'), ('warn', 'Warn'), ('note', 'Note')], max_length=15)),
                ('reason', models.TextField(max_length=5000, null=True)),
                ('automod_logs', models.TextField(blank=True, default=None, null=True)),
                ('attachment', models.URLField(blank=True, default=None, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='APIAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(default=webinterface.models.get_token, max_length=200)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiscordGuild',
            fields=[
                ('discord_id', models.CharField(max_length=40, primary_key=True, serialize=False, unique=True)),
                ('discord_name', models.CharField(max_length=200)),
                ('discord_icon_url', models.URLField()),
                ('discord_created_at', models.DateTimeField()),
                ('discord_user_count', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='DiscordUser',
            fields=[
                ('discord_id', models.CharField(max_length=40, primary_key=True, serialize=False, unique=True)),
                ('discord_name', models.CharField(max_length=200)),
                ('discord_discriminator', models.IntegerField()),
                ('discord_avatar_url', models.URLField()),
                ('discord_default_avatar_url', models.URLField()),
                ('discord_bot', models.BooleanField()),
                ('admin_info', models.TextField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GuildSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imported_bans', models.BooleanField(default=False)),
                ('automod_enable', models.BooleanField(default=False, verbose_name='enable Automod')),
                ('automod_delete_message_score', models.FloatField(default=1.5, help_text='Set to 0 to disable', verbose_name='automod score to delete messages')),
                ('automod_warn_score', models.FloatField(default=2, help_text='Set to 0 to disable', verbose_name='automod score to warn the author of a message')),
                ('automod_kick_score', models.FloatField(default=0, help_text='Set to 0 to disable', verbose_name='automod score to kick the author of a message')),
                ('automod_softban_score', models.FloatField(default=7, help_text='Set to 0 to disable', verbose_name='automod score to softban the author of a message')),
                ('automod_ban_score', models.FloatField(default=10, help_text='Set to 0 to disable', verbose_name='automod score to ban the author of a message')),
                ('automod_multiplictor_offline', models.FloatField(default=0.15, help_text='Most spammers use(d) invisible mode to be harder to mention when banning', verbose_name='message author is offline')),
                ('automod_multiplictor_new_account', models.FloatField(default=0.75, help_text='Account less than a week old', verbose_name='message author account is new')),
                ('automod_multiplictor_just_joined', models.FloatField(default=0.5, help_text='Was in the server for less than a day since the last join', verbose_name='message author just joined the server')),
                ('automod_multiplictor_have_nitro', models.FloatField(default=-0.75, help_text='Due to discord limitations, only nitro users with animated avatars are currently detected.', verbose_name='message author has nitro')),
                ('automod_multiplictor_have_roles', models.FloatField(default=-0.1, verbose_name='message author have more than one role in the server')),
                ('automod_multiplictor_bot_banned', models.FloatField(default=0.25, help_text='You can bot-ban people with +add_banned [user] in your server', verbose_name='message author is banned from the bot')),
                ('automod_score_caps', models.FloatField(default=1, help_text='To prevent messages like "OK" to be flagged as full-caps, messages must be at least 16 chars in length, and shoudn\'t look like a command (experimental)', verbose_name='message written in CAPS LOCK')),
                ('automod_score_embed', models.FloatField(default=5, help_text='Rich embeds cannot be sent by users without using a userbot. They are often used to circumvent the message filtering', verbose_name='message contain a rich embed')),
                ('automod_score_everyone', models.FloatField(default=1, help_text='Note that this will only be true if the @everyone ping failed', verbose_name='message contain a failed @everyone ping')),
                ('automod_score_too_many_mentions', models.FloatField(default=1, help_text='More than 3 of them', verbose_name='message contain too many user mentions')),
                ('automod_score_contain_invites', models.FloatField(default=2.5, help_text="Untrusted invites are invites for another server that the one they are in, with a member count smaller than what's specified in the misc options of the automod", verbose_name='message contain untrusted invites')),
                ('automod_score_repeated', models.FloatField(default=0.25, help_text="This score is added for every repeat (so, if I sent the same message 4 times, that'd be 4*0.25=1)", verbose_name='message was repeated more than 3 times')),
                ('automod_score_bad_words', models.FloatField(default=0.15, help_text='This score is added for each bad word found in the message. Note that this is imperfect and subject to change', verbose_name='message contains bad words')),
                ('automod_ignore_level', models.IntegerField(default=2, help_text='Level 2 is trusted users, 3 moderators, 4 admins and 5 owner.', verbose_name='minimum bot level required for automod to ignore you')),
                ('automod_ignore_invites_in', models.CharField(default='0', help_text='Set to 0 to disable ignoring invites in a channel', max_length=40, verbose_name='channel id where the bot will ignore untrusted invites')),
                ('automod_minimal_membercount_trust_server', models.IntegerField(default=10000, help_text='Set to 0 to disable trusting servers using their member count', verbose_name='Minimum member count to consider a server trusted')),
                ('tresholds_enable', models.BooleanField(default=False, verbose_name='enable thresholds')),
                ('tresholds_warns_to_kick', models.IntegerField(default=3, verbose_name='number of warns that must be applied to a user before they receive an automatic kick')),
                ('tresholds_kicks_to_bans', models.IntegerField(default=3, verbose_name='number of kicks that must be applied to a user before they receive an automatic ban')),
                ('tresholds_softbans_to_bans', models.IntegerField(default=2, verbose_name='number of softbans that must be applied to a user before they receive an automatic ban')),
                ('logs_enable', models.BooleanField(default=False, help_text='Set a specific log channel ID to 0 to disable that particular log', verbose_name='enable logging actions to a channel')),
                ('logs_as_embed', models.BooleanField(default=True, help_text='Disable to use plain text', verbose_name='use cooler embeds in logs')),
                ('logs_moderation_channel_id', models.CharField(default='0', max_length=40, verbose_name='ID of the channel to log moderation messages to')),
                ('logs_joins_channel_id', models.CharField(default='0', max_length=40, verbose_name='ID of the channel to log joins and leave to')),
                ('logs_member_edits_channel_id', models.CharField(default='0', max_length=40, verbose_name='ID of the channel to log members name changes to')),
                ('logs_edits_channel_id', models.CharField(default='0', max_length=40, verbose_name='ID of the channel to log messages edits to')),
                ('logs_delete_channel_id', models.CharField(default='0', max_length=40, verbose_name='ID of the channel to log messages delete to')),
                ('bot_prefix', models.CharField(default='+', help_text='The g+ prefix will always work, regardless of this setting', max_length=15, verbose_name='bot prefix')),
                ('guild', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='_settings', to='webinterface.DiscordGuild')),
                ('permissions_admins', models.ManyToManyField(blank=True, help_text='Select multiple users with CTRL+click. Add users with +add_admin [user] in your server', related_name='admin_status', to='webinterface.DiscordUser', verbose_name='additional admins')),
                ('permissions_banned', models.ManyToManyField(blank=True, help_text='Select multiple users with CTRL+click. Add users with +add_banned [user] in your server', related_name='banned_status', to='webinterface.DiscordUser', verbose_name='additional banned users')),
                ('permissions_moderators', models.ManyToManyField(blank=True, help_text='Select multiple users with CTRL+click. Add users with +add_moderator [user] in your server', related_name='moderator_status', to='webinterface.DiscordUser', verbose_name='additional moderators')),
                ('permissions_trusted', models.ManyToManyField(blank=True, help_text='Select multiple users with CTRL+click. Add users with +add_trusted [user] in your server', related_name='trusted_status', to='webinterface.DiscordUser', verbose_name='additional trusted users')),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_beta_features', models.BooleanField(default=False)),
                ('dark_theme_enabled', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='_settings', to='webinterface.DiscordUser')),
            ],
        ),
        migrations.AddField(
            model_name='discordguild',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='guilds_owned', to='webinterface.DiscordUser'),
        ),
        migrations.AddField(
            model_name='action',
            name='guild',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='webinterface.DiscordGuild'),
        ),
        migrations.AddField(
            model_name='action',
            name='responsible_moderator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actions_given', to='webinterface.DiscordUser'),
        ),
        migrations.AddField(
            model_name='action',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='actions_received', to='webinterface.DiscordUser'),
        ),
    ]
